#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <math.h>
#include "pico/stdlib.h"
#include "hardware/clocks.h"
#include "hardware/gpio.h"                                                  // Required for manually toggling GPIO pins (clock)

#define eof            255                                                  // EOF in stdio.h -is -1, but getchar returns int 255 to avoid blocking
#define MWidth          10                                                  // Width of terminal command margin (in columns)
#define SysClock       125                                                  // System clock     (Pico default)

// Data for the clock face is generated externally using an Excel spreadsheet...
uint8_t FaceX[] = {
0xfa,0xfb,0xfc,0xfd,0xfe,0xff,0xff,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfd,0xfd,0xfd,0xfc,0xfc,0xfb,0xfb,0xfa,0xfa,0xf9,0xf8,0xf8,0xf7,0xf6,0xf5,0xf4,0xf3,0xf3,0xf2,0xf1,0xf0,0xef,0xe9,0xea,0xeb,0xec,0xed,0xed,0xec,0xeb,0xea,0xe9,0xe7,0xe6,0xe5,0xe3,0xe2,0xe1,0xdf,0xde,0xdc,0xdb,0xd9,0xd8,0xd6,0xd4,0xd3,0xd1,0xcf,0xcd,0xcc,0xca,0xc8,0xc6,0xc4,0xc3,0xc1,0xbc,0xbd,0xbd,0xbe,0xbe,0xbf,0xbd,0xbb,0xb9,0xb7,0xb5,0xb3,0xb1,0xaf,0xad,0xab,0xa9,0xa6,0xa4,0xa2,0xa0,0x9e,0x9c,0x9a,0x97,0x95,0x93,0x91,0x8f,0x8c,0x8a,0x88,0x86,0x83,0x81,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7d,0x7b,0x78,0x76,0x74,0x72,0x6f,0x6d,0x6b,0x69,0x67,0x64,0x62,0x60,0x5e,0x5c,0x5a,0x58,0x55,0x53,0x51,0x4f,0x4d,0x4b,0x49,0x47,0x45,0x43,0x41,0x42,0x41,0x41,0x40,0x40,0x3f,0x3d,0x3b,0x3a,0x38,0x36,0x34,0x32,0x31,0x2f,0x2d,0x2b,0x2a,0x28,0x26,0x25,0x23,0x22,0x20,0x1f,0x1d,0x1c,0x1b,0x19,0x18,0x17,0x15,0x14,0x13,0x12,0x15,0x14,0x13,0x12,0x11,0x11,0x0f,0x0e,0x0d,0x0c,0x0b,0x0b,0x0a,0x09,0x08,0x07,0x06,0x06,0x05,0x04,0x04,0x03,0x03,0x02,
0x02,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x04,0x03,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x02,0x02,0x03,0x03,0x04,0x04,0x05,0x06,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0b,0x0c,0x0d,0x0e,0x0f,0x15,0x14,0x13,0x12,0x11,0x11,0x12,0x13,0x14,0x15,0x17,0x18,0x19,0x1b,0x1c,0x1d,0x1f,0x20,0x22,0x23,0x25,0x26,0x28,0x2a,0x2b,0x2d,0x2f,0x31,0x32,0x34,0x36,0x38,0x3a,0x3b,0x3d,0x42,0x41,0x41,0x40,0x40,0x3f,0x41,0x43,0x45,0x47,0x49,0x4b,0x4d,0x4f,0x51,0x53,0x55,0x58,0x5a,0x5c,0x5e,0x60,0x62,0x64,0x67,0x69,0x6b,0x6d,0x6f,0x72,0x74,0x76,0x78,0x7b,0x7d,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x81,0x83,0x86,0x88,0x8a,0x8c,0x8f,0x91,0x93,0x95,0x97,0x9a,0x9c,0x9e,0xa0,0xa2,0xa4,0xa6,0xa9,0xab,0xad,0xaf,0xb1,0xb3,0xb5,0xb7,0xb9,0xbb,0xbd,0xbc,0xbd,0xbd,0xbe,0xbe,0xbf,0xc1,0xc3,0xc4,0xc6,0xc8,0xca,0xcc,0xcd,0xcf,0xd1,0xd3,0xd4,0xd6,0xd8,0xd9,0xdb,0xdc,0xde,0xdf,0xe1,0xe2,0xe3,0xe5,0xe6,0xe7,0xe9,0xea,0xeb,0xec,0xe9,0xea,0xeb,0xec,0xed,0xed,0xef,0xf0,0xf1,0xf2,0xf3,0xf3,0xf4,0xf5,
0xf6,0xf7,0xf8,0xf8,0xf9,0xfa,0xfa,0xfb,0xfb,0xfc,0xfc,0xfd,0xfd,0xfd,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x4c,0x28,0x27,0x26,0x25,0x24,0x23,0x22,0x21,0x20,0x1f,0x1e,0x1d,0x1c,0x1c,0x1c,0x1c,0x1c,0x1c,0x1d,0x1e,0x1f,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x27,0x26,0x25,0x24,0x23,0x22,0x21,0x20,0x1f,0x1e,0x1d,0x1c,0x18,0x17,0x16,0x15,0x14,0x13,0x12,0x11,0x10,0x0f,0x0e,0x0d,0x0c,0x0c,0x0c,0x0c,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x0e,0x0d,0x0c,0x0c,0x0c,0x0c,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x27,0x26,0x25,0x24,0x23,0x22,0x21,0x20,0x1f,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x1e,0x26,0x25,0x24,0x23,0x22,0x21,0x20,0x1f,0x1e,0x1d,0x1c,0x1b,0x52,0x51,0x50,0x4f,0x4e,0x4d,0x4c,0x4b,0x4a,0x49,0x48,0x47,0x46,0x46,0x46,0x46,0x46,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,
0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x52,0x51,0x50,0x4f,0x4e,0x4d,0x4c,0x4b,0x4a,0x49,0x48,0x47,0x46,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,0x80,0x81,0x82,0x83,0x83,0x83,0x83,0x83,0x83,0x83,0x83,0x83,0x83,0x83,0x83,0x83,0x83,0x83,0x82,0x81,0x80,0x7f,0x7e,0x7d,0x7c,0x7b,0x7a,0x79,0x78,0x77,0x77,0x77,0x77,0x77,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,0x80,0x81,0x82,0xb6,0xb6,0xb6,0xb6,0xb6,0xb6,0xb6,0xb6,0xb6,0xb5,0xb4,0xb3,0xb2,0xb1,0xb0,0xaf,0xaf,0xaf,0xaf,0xaf,0xaf,0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xe0,0xe1,0xe2,0xe3,0xe3,0xe3,0xe3,0xe3,0xe3,0xe2,0xe1,0xe0,0xdf,0xde,0xdd,0xdc,0xdb,0xda,0xd9,0xd8,0xd7,0xd7,0xd7,0xd7,0xd7,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xde,0xdf,0xe1,0xe2,0xe3,0xe3,0xe3,0xe3,0xe2,0xe1,0xe0,0xdf,0xde,0xdd,0xdc,0xdb,0xda,0xd9,0xd8,0xd7,0xd7,0xd7,0xd7,0xd8,0xd9,0xf0,0xef,0xee,0xed,0xec,0xeb,0xea,0xe9,0xe8,0xe7,0xe6,0xe5,0xe4,0xe4,0xe4,0xe4,0xe4,0xe4,0xe4,0xe4,0xe4,0xe4,0xe4,0xe4,0xe4,0xe4,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,
0xeb,0xec,0xed,0xee,0xef,0xf0,0xf0,0xf0,0xf0,0xf0,0xef,0xee,0xed,0xec,0xeb,0xea,0xe9,0xe8,0xe7,0xe6,0xe5,0xe4,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xe2,0xda,0xd9,0xd8,0xd7,0xd6,0xd5,0xd4,0xd3,0xd2,0xd1,0xd0,0xcf,0xcf,0xcf,0xcf,0xcf,0xcf,0xcf,0xcf,0xcf,0xcf,0xcf,0xcf,0xcf,0xcf,0xcf,0xd0,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xb5,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x86,0x81,0x80,0x7f,0x7e,0x7d,0x7c,0x7b,0x7a,0x79,0x78,0x77,0x76,0x75,0x75,0x75,0x75,0x75,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,0x80,0x81,0x80,0x7f,0x7e,0x7d,0x7c,0x7b,0x7a,0x79,0x78,0x77,0x76,0x75,} ;
uint8_t FaceY[] = {
0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7d,0x7b,0x78,0x76,0x74,0x72,0x6f,0x6d,0x6b,0x69,0x67,0x64,0x62,0x60,0x5e,0x5c,0x5a,0x58,0x55,0x53,0x51,0x4f,0x4d,0x4b,0x49,0x47,0x45,0x43,0x41,0x42,0x41,0x41,0x40,0x40,0x3f,0x3d,0x3b,0x3a,0x38,0x36,0x34,0x32,0x31,0x2f,0x2d,0x2b,0x2a,0x28,0x26,0x25,0x23,0x22,0x20,0x1f,0x1d,0x1c,0x1b,0x19,0x18,0x17,0x15,0x14,0x13,0x12,0x15,0x14,0x13,0x12,0x11,0x11,0x0f,0x0e,0x0d,0x0c,0x0b,0x0b,0x0a,0x09,0x08,0x07,0x06,0x06,0x05,0x04,0x04,0x03,0x03,0x02,0x02,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x04,0x03,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x02,0x02,0x03,0x03,0x04,0x04,0x05,0x06,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0b,0x0c,0x0d,0x0e,0x0f,0x15,0x14,0x13,0x12,0x11,0x11,0x12,0x13,0x14,0x15,0x17,0x18,0x19,0x1b,0x1c,0x1d,0x1f,0x20,0x22,0x23,0x25,0x26,0x28,0x2a,0x2b,0x2d,0x2f,0x31,0x32,0x34,0x36,0x38,0x3a,0x3b,0x3d,0x42,0x41,0x41,0x40,0x40,0x3f,0x41,0x43,0x45,0x47,0x49,0x4b,0x4d,0x4f,0x51,0x53,0x55,0x58,0x5a,0x5c,0x5e,0x60,0x62,0x64,
0x67,0x69,0x6b,0x6d,0x6f,0x72,0x74,0x76,0x78,0x7b,0x7d,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x81,0x83,0x86,0x88,0x8a,0x8c,0x8f,0x91,0x93,0x95,0x97,0x9a,0x9c,0x9e,0xa0,0xa2,0xa4,0xa6,0xa9,0xab,0xad,0xaf,0xb1,0xb3,0xb5,0xb7,0xb9,0xbb,0xbd,0xbc,0xbd,0xbd,0xbe,0xbe,0xbf,0xc1,0xc3,0xc4,0xc6,0xc8,0xca,0xcc,0xcd,0xcf,0xd1,0xd3,0xd4,0xd6,0xd8,0xd9,0xdb,0xdc,0xde,0xdf,0xe1,0xe2,0xe3,0xe5,0xe6,0xe7,0xe9,0xea,0xeb,0xec,0xe9,0xea,0xeb,0xec,0xed,0xed,0xef,0xf0,0xf1,0xf2,0xf3,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf8,0xf9,0xfa,0xfa,0xfb,0xfb,0xfc,0xfc,0xfd,0xfd,0xfd,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfa,0xfb,0xfc,0xfd,0xfe,0xff,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfd,0xfd,0xfd,0xfc,0xfc,0xfb,0xfb,0xfa,0xfa,0xf9,0xf8,0xf8,0xf7,0xf6,0xf5,0xf4,0xf3,0xf3,0xf2,0xf1,0xf0,0xef,0xe9,0xea,0xeb,0xec,0xed,0xed,0xec,0xeb,0xea,0xe9,0xe7,0xe6,0xe5,0xe3,0xe2,0xe1,0xdf,0xde,0xdc,0xdb,0xd9,0xd8,0xd6,0xd4,0xd3,0xd1,0xcf,0xcd,0xcc,0xca,0xc8,0xc6,0xc4,0xc3,0xc1,0xbc,0xbd,0xbd,0xbe,0xbe,0xbf,0xbd,0xbb,0xb9,0xb7,0xb5,0xb3,0xb1,0xaf,
0xad,0xab,0xa9,0xa6,0xa4,0xa2,0xa0,0x9e,0x9c,0x9a,0x97,0x95,0x93,0x91,0x8f,0x8c,0x8a,0x88,0x86,0x83,0x81,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x3e,0x3d,0x3c,0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,0x3c,0x3d,0x3e,0x3f,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x4f,0x4f,0x4f,0x4f,0x4f,0x4f,0x4f,0x4f,0x4f,0x4f,0x4f,0x4f,0x78,0x77,0x76,0x75,0x75,0x75,0x75,0x75,0x75,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x89,0x89,0x89,0x89,0x89,0x89,0x88,0x87,0x86,0xb3,0xb2,0xb1,0xb0,0xaf,0xae,0xad,0xac,0xab,0xaa,0xab,0xac,0xad,0xae,0xaf,0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xb3,0xb3,0xb3,0xb3,0xb3,0xb3,0xb3,0xb3,0xb3,0xb3,0xb3,0xb3,0xe2,0xe3,0xe4,0xe5,0xe5,0xe5,0xe5,0xe5,0xe5,0xe5,0xe4,0xe3,0xe2,0xe1,0xe0,0xdf,0xde,0xdd,0xdc,0xdb,0xda,0xda,0xda,0xda,0xda,0xda,0xda,0xda,0xda,
0xda,0xd9,0xd8,0xd7,0xd6,0xd5,0xd4,0xd3,0xd2,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xe0,0xdf,0xde,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xde,0xdf,0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf0,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf0,0xef,0xee,0xed,0xec,0xeb,0xea,0xe9,0xe8,0xe7,0xe6,0xe6,0xe6,0xe6,0xe6,0xe6,0xe6,0xe7,0xe8,0xe5,0xe4,0xe3,0xe2,0xe1,0xe0,0xdf,0xde,0xdd,0xdc,0xdb,0xda,0xd9,0xd8,0xd7,0xd6,0xd5,0xd4,0xd3,0xd2,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xd1,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbe,0xbe,0xbe,0xbe,0xbe,0xbe,0xbd,0xbc,0xbb,0xba,0xb9,0xb8,0xb7,0xb6,0xb5,0xb4,0xb3,0xb3,0xb3,0xb3,0xb3,0xb3,0xb2,0xb1,0xb0,0xaf,0xae,0xad,0xac,0xab,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xab,0xac,0xad,0xae,0xaf,0xb0,0xb1,0xb2,0x87,0x88,0x89,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x8a,0x89,0x88,0x87,0x86,0x85,0x84,0x83,0x82,0x81,0x80,0x7f,0x7e,0x7d,0x7c,0x7b,0x7a,0x79,0x78,0x77,0x76,0x76,0x76,0x76,
0x76,0x76,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x7f,0x7e,0x7d,0x3b,0x3c,0x3d,0x3e,0x3f,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x4d,0x4e,0x4f,0x4f,0x4f,0x4f,0x4f,0x4f,0x4f,0x4e,0x4d,0x4c,0x4b,0x4a,0x49,0x48,0x47,0x46,0x45,0x44,0x43,0x42,0x41,0x40,0x3f,0x3e,0x3d,0x3c,0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,0x3b,0x3c,0x3d,0x3e,0x3f,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x0e,0x0d,0x0c,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,} ;
// (Number of pixels: 1000)

// Data for clock hands is generated internally using maths routines.
// Store clock hands co-ordinates...
uint8_t HandsX[192] = {} ;                                                  // Each hand requires 64 bytes - 3x64=192
uint8_t HandsY[192] = {} ;
int Hours=0, Mins=0, Secs=0, LEDCtr=0, Angle, StartX, StartY, Radius ;
float Radians ;

char MarginFW[MWidth+1], MarginVW[MWidth+1] ;                               // Fixed Width & Variable Width strings to create a fixed margin
int c, i, ParmCnt = 0, Parm[4] ;
int MarginCount = 0 ;                                                       // Manual count of characters written to terminal

bool Repeating_Timer_Callback(struct repeating_timer *t) {
    // Routine called 5 times per second...
    int i, steps=64, MidX=128, MidY=128 ;
    // printf("%d\n",LEDCtr) ;                                                  // Debug
    LEDCtr --  ;
    if (LEDCtr>0) {                                     
        // LED off, and no change to the time for 4 out of 5 cycles...
        gpio_put(PICO_DEFAULT_LED_PIN, 0); }                                    // LED off for cycles 1,2,3 & 4
    else  {
        // Falls through here once per second. 
        LEDCtr = 5 ;
        gpio_put(PICO_DEFAULT_LED_PIN, 1);                                      // LED on for cycle 0
        // Bump the clock...
        if ((++Secs)>59) Secs=0 ;                                               // Always bump seconds
        if (Secs==0) { if ((++Mins)>59 ) Mins=0 ;  }                            // Bump minutes when seconds = 0
        if ((Mins==0) && (Secs==0)) { if ((++Hours)>24) Hours=0 ; }             // Bump hours when minutes and seconds = 0

        // Calculate seconds hand...
        i=0, Radius=127 ;                                                       // Radius=Length of seconds hand
        Angle=270-(Secs*6) ;                                                    // Angle in degrees, shifted 90 degree anti-clockwise
        Radians=Angle*3.14159/180 ;                                             // Angle in radians
        StartX=Radius*cos(Radians)+MidX ;
        StartY=Radius*sin(Radians)+MidY ;
        while(i<steps) { HandsX[i]=StartX+i*(MidX-StartX)/steps ;
                        HandsY[i]=StartY+i*(MidY-StartY)/steps ;
                        i++ ; }
        // Calculate minutes hand...
        i=0, Radius=95 ;                                                        // Radius=Length of minutes hand
        Angle=270-(Mins*6) ;                                                    // Angle in degrees, shifted 90 degree anti-clockwise
        Radians=Angle*3.14159/180 ;                                             // Angle in radians
        StartX=Radius*cos(Radians)+MidX ;
        StartY=Radius*sin(Radians)+MidY ;
        i=0 ;
        while(i<steps) { HandsX[i+steps]=StartX+i*(MidX-StartX)/steps ;
                        HandsY[i+steps]=StartY+i*(MidY-StartY)/steps ;
                        i++ ; }
        // Calculate hours hand...
        i=0, Radius=64 ;                                                        // Radius=Length of hours hand
        // Note: Hours hand progresses between hours in 5 partial increments, each increment measuring 12 minutes.
        //       Each 12 minute increment adds an additional 6 degrees of rotation to the hours hand.
        Angle=5*(270-(((Hours%12)*6)+(Mins/12)%5)) ;                            // Angle in degrees, shifted 90 degree anti-clockwise,
                                                                                //   and scaled by 5 to provide range 0=>12
        Radians=Angle*3.14159/180 ;                                             // Angle in radians
        StartX=Radius*cos(Radians)+MidX ;
        StartY=Radius*sin(Radians)+MidY ;
        while(i<steps) { HandsX[i+2*steps]=StartX+i*(MidX-StartX)/steps ;
                        HandsY[i+2*steps]=StartY+i*(MidY-StartY)/steps ;
                        i++ ; }

        //  printf("%s%d:%d:%d - %d\n",MarginFW,Hours,Mins,Secs,tmp) ;          // Debug
    }
    return true;
}

void VerText (char *outText) {
    // Print version info aligned to current margin settings...
    MarginVW[MWidth] = '\0' ;                                               // Calculate padding required for command characters and cursor
    sprintf(outText,"%s|----------------------|\n"
                    "%s|  Oscilloscope Clock  |\n"
                    "%s|     Version 1.0.0    |\n"
                    "%s|  1st September 2023  |\n"
                    "%s|----------------------|\n", 
                    MarginVW, MarginFW, MarginFW, MarginFW, MarginFW ) ;
}

void HlpText (char *outStr) {
    // Print Help text aligned to current margin settings...
    MarginVW[MWidth - 2] = '\0' ;                                            // Calculate padding required for command characters and cursor
    sprintf(outStr,"%s?   - Help\n"
                   "%sV   - Version info\n"
                   "%sX   - Invert X axis\n"
                   "%sY   - Invert Y axis\n"
                   "%sT   - Set Time: Notation: HH:MM:SS or HH,MM,SS\n"
                   "%s                HH can be either 12 or 24 hour notation\n"
                   "%s                  e.g. '03:00:00' is the same as '15:00:00'\n"
                   "%s                Delimiter can be either ':' or ','\n"
                   "%s                  e.g. '15:00:00' is the same as '15,00,00'\n"
                   "%s                MM is in the range 0<=MM<=59\n"
                   "%s                SS is in the range 0<=SS<=59\n"
                   "%s                Leading zeros can be ommited.\n"
                   "%s                  e.g. '1:2:3' is the same as '01:02:03'\n"
                   "%s                Trailing parameters can be ommited, and will be set to zero.\n"
                   "%s                  e.g. '12:15' is the same as '12:15:00'\n"
                   "%s                       '12'    is the same as '12:00:00'\n"
                   "%sL   - Set Level: Notation: 2 digit percentage 0<=nn<=100\n",
                   MarginVW, MarginFW, MarginFW, MarginFW, MarginFW, MarginFW, MarginFW, MarginFW,
                   MarginFW, MarginFW, MarginFW, MarginFW, MarginFW, MarginFW, MarginFW, MarginFW, MarginFW) ;
}

static void getLine(char *inStr) {
    int count = 0 ;
    while(1) { c = getchar();
               if (c == eof || c == '\n' || c == '\r') break ;              // Non blocking exit
               putchar(c);                                                  // FullDuplex echo
               *inStr++ = c ;                                               // Bump pointer, store character
               count ++ ; }
    *inStr = '\0' ;
    MarginCount += count ;                                                  // Track number of characters on current line
    return ;
}

int main() {
    char inStr[32], outStr[2000] ;                                          // General purpose input/output buffers
    bool InvX=false, InvY=false ;                                           // Flags to allow inverted output
    int outX, outY ;                                                        // Final value to send to DAC
    uint8_t Level=50 ;                                                      // % scale applied to DAC output
    set_sys_clock_khz(SysClock*1000, true) ;                                // Set Pico clock speed
    stdio_init_all() ;

// Initialise GPIO ports for use with R-2R resistor network...
// (Setting Max slew rate and gpio drive strength keeps output linear at high frequencies)
    for (int gpio = 0; gpio < 16; gpio++) {
        gpio_init(gpio);
        gpio_set_dir(gpio, GPIO_OUT);
        gpio_set_slew_rate(gpio, GPIO_SLEW_RATE_FAST);
        gpio_set_drive_strength(gpio, GPIO_DRIVE_STRENGTH_12MA);
    } 

// Initialise GPIO port for on board LED...
    gpio_init(PICO_DEFAULT_LED_PIN);
    gpio_set_dir(PICO_DEFAULT_LED_PIN, GPIO_OUT);

    memset(MarginFW,' ',MWidth) ;                                           // Initialise Fixed Width margin...
    MarginFW[MWidth] = '\0' ;                                               //  ... and terminate
    memset(MarginVW,' ',MWidth) ;                                           // Initialise Variable Width margin...
    MarginVW[MWidth] = '\0' ;                                               //  ... and terminate

// Wait for USB connection...
// Note: LED will not flash, and no data will be generated until a terminal connection has been established.
    while (!stdio_usb_connected()) { sleep_ms(100); }

    struct repeating_timer timer;
    add_repeating_timer_ms(-200, Repeating_Timer_Callback, NULL, &timer) ;  // 5 x per second to blink LED
    
// Send (optional) start-up messages to terminal...
    VerText(outStr) ;                                                       // Version text
    printf(outStr) ;                                                        // Update terminal

    while(1) {
        memset(MarginVW,' ',MWidth) ;                                       // Re-initialise Variable Width margin...
        MarginVW[MWidth] = '\0' ;                                           //  ... and terminate
        printf(">") ;                                                       // Command prompt
        MarginCount = 1 ;                                                   // Reset count and bump for command prompt

        // Clock display code...
        gpio_clr_mask(0xff) ;                                               // Clear first 16 GPIO outputs
        for (;;) {                                                          // Continual loop
            // Draw the clock face...
            for (int i=0; i<sizeof(FaceX); i++) {
                outX=FaceX[i] ;                                             // Default 8 bit output
                if (!InvX) outX=255-outX ;                                  // Inverted 8 bit output
                outX=outX*Level/100 ;                                       // Scale the output
                gpio_put_masked(0x00ff,outX) ;                              // Transfer data to the DAC A
                outY=FaceY[i] ;                                             // Default 8 bit output
                if (!InvY) outY=255-outY ;                                  // Inverted 8 bit output
                outY=outY*Level/100 ;                                       // Scale the output
                gpio_put_masked(0xff00,outY<<8) ;                           // Transfer data to the DAC B
                sleep_us(2) ;                                               // Pause for on-screen persistance
            }
            // Draw the clock hands...
            for (i=0; i<192; i++) {                                         // 3 hands @ 64 pixels each = 192
                outX=HandsX[i] ;                                            // Default 8 bit output
                if (!InvX) outX=255-outX ;                                  // Inverted 8 bit output
                outX=outX*Level/100 ;                                       // Scale the output
                gpio_put_masked(0x00ff,outX) ;                              // Transfer data to the DAC A
                outY=HandsY[i] ;                                            // Default 8 bit output
                if (!InvY) outY=255-outY ;                                  // Inverted 8 bit output
                outY=outY*Level/100 ;                                       // Scale the output
                gpio_put_masked(0xff00,outY<<8) ;                           // Transfer data to the DAC B
                sleep_us(2) ;                                               // Pause for on-screen persistance
            }

            // Check for console input...
            c = getchar_timeout_us (0);                                     // Non-blocking char input
            if (c!=EOF) {                                                   // c=EOF if no input
                // falls through here if we have an input character...
                putchar(c) ;                                                // Echo to terminal
                MarginCount = 2 ;                                           // Reset count and bump for command prompt + input
                MarginVW[MWidth - MarginCount] = '\0' ;                     // Calculate padding required  for command characters and cursor
                if ((c=='T') or (c=='t')) {                                 // Set time
                    printf("%sSet time (format HH:MM:SS)\n%s",MarginVW, MarginFW ) ;
                    getLine(inStr) ;                                        // Get the console input
                    Parm[0]=0,  Parm[1]=0,  Parm[2]=0,  Parm[3]=0 ;         // Reset all command line parameters
                    i=0, ParmCnt=0 ;                                        // Reset all command line counters
                    while (i<strlen(inStr) ) {
                        if ((inStr[i]==':')||(inStr[i]==',')) {             // Next parameter
                            ParmCnt++ ; }
                        else if (isdigit(inStr[i])) { 
                            Parm[ParmCnt] *= 10;                            // Next digit. Bump the existing decimal digits
                            Parm[ParmCnt] += inStr[i] - '0'; }              // Convert character to integer and add
                        i++ ;                                               // Next character
                    }
                    inStr[0]='\0' ;                                         // Reset input buffer
                    Hours=Parm[0]%24 ; Mins=Parm[1]%60 ; Secs=Parm[2]%60 ;  // Set the time from parameters
                    printf("\n%sClock set to %02d:%02d:%02d\n>",MarginFW,Hours,Mins,Secs) ;
                    LEDCtr=0 ;                                              // Force update and do it now
                    Repeating_Timer_Callback(&timer) ;
                }
                else if ((c=='L') or (c=='l')) {                            // Set level
                    printf("%sSet level (percentage format 0<=nn<=100)\n%s",MarginVW, MarginFW ) ;
                    getLine(inStr) ;                                        // Get the console input
                    Parm[0]=0,  Parm[1]=0,  Parm[2]=0,  Parm[3]=0 ;         // Reset all command line parameters
                    i=0, ParmCnt=0 ;                                        // Reset all command line counters
                    while (i<strlen(inStr) ) {
                        if ((inStr[i]==':')||(inStr[i]==',')) {             // Next parameter
                            ParmCnt++ ; }
                        else if (isdigit(inStr[i])) { 
                            Parm[ParmCnt] *= 10;                            // Next digit. Bump the existing decimal digits
                            Parm[ParmCnt] += inStr[i] - '0'; }              // Convert character to integer and add
                        i++ ;                                               // Next character
                    }
                    inStr[0]='\0' ;                                         // Reset input buffer
                    Level=Parm[0] ;                                         // Set the level from parameter
                    printf("\n%sLevel set to %02d%%\n>",MarginFW,Level) ;
                }
                else if ((c=='x') or (c=='X')) {
                    InvX = !InvX ;
                    if (InvX) printf("%sX axis inverted.\n>",MarginVW) ;   // Print current status
                    else      printf("%sX axis not inverted.\n>",MarginVW) ; 
                }
                else if ((c=='y') or (c=='Y')) {
                    InvY = !InvY ;
                    if (InvY) printf("%sY axis inverted.\n>",MarginVW) ;   // Print current status
                    else      printf("%sY axis not inverted.\n>",MarginVW) ; 
                }
                else if (c=='?') {
                    HlpText(outStr) ;                                       // Create output string...
                    printf("%s\n>",outStr) ;                                // ... and print it
                }
                else if ((c=='v') or (c=='V')) {
                    VerText(outStr) ;                                       // Create output string...
                    printf("%s\n>",outStr) ;                                // ... and print it
                }
                else {
                    printf("%sUnknown command - press '?' for help.\n>",MarginVW) ;
                }
            }
        }
    }
}
